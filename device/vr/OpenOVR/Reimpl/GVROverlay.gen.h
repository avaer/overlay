#pragma once
#include "BaseCommon.h"
#include "OpenVR/interfaces/IVROverlay_010.h"
#include "OpenVR/interfaces/IVROverlay_011.h"
#include "OpenVR/interfaces/IVROverlay_013.h"
#include "OpenVR/interfaces/IVROverlay_014.h"
#include "OpenVR/interfaces/IVROverlay_016.h"
#include "OpenVR/interfaces/IVROverlay_017.h"
#include "OpenVR/interfaces/IVROverlay_018.h"
#include "OpenVR/interfaces/IVROverlay_019.h"
#include "BaseOverlay.h"
class CVROverlay_010 : public vr::IVROverlay_010::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_010();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_010::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_010::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_010::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_010::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_010::EGamepadTextInputMode eInputMode, vr::IVROverlay_010::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_010::EGamepadTextInputMode eInputMode, vr::IVROverlay_010::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
};
#include "BaseOverlay.h"
class CVROverlay_011 : public vr::IVROverlay_011::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_011();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_011::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_011::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_011::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_011::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, EGraphicsAPIConvention* pAPI, vr::EColorSpace* pColorSpace);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_011::EGamepadTextInputMode eInputMode, vr::IVROverlay_011::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_011::EGamepadTextInputMode eInputMode, vr::IVROverlay_011::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
};
#include "BaseOverlay.h"
class CVROverlay_013 : public vr::IVROverlay_013::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_013();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_013::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_013::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_013::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_013::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, EGraphicsAPIConvention* pAPI, vr::EColorSpace* pColorSpace);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_013::EGamepadTextInputMode eInputMode, vr::IVROverlay_013::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::EGamepadTextInputMode eInputMode, vr::IVROverlay_013::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_013::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
};
#include "BaseOverlay.h"
class CVROverlay_014 : public vr::IVROverlay_014::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_014();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_014::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_014::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_014::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_014::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, vr::ETextureType* pAPIType, vr::EColorSpace* pColorSpace, vr::VRTextureBounds_t* pTextureBounds);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_014::EGamepadTextInputMode eInputMode, vr::IVROverlay_014::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::EGamepadTextInputMode eInputMode, vr::IVROverlay_014::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_014::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
	vr::EVROverlayError GetOverlayFlags(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pFlags);
	vr::IVROverlay_014::VRMessageOverlayResponse ShowMessageOverlay(const char* pchText, const char* pchCaption, const char* pchButton0Text, const char* pchButton1Text, const char* pchButton2Text, const char* pchButton3Text);
};
#include "BaseOverlay.h"
class CVROverlay_016 : public vr::IVROverlay_016::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_016();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, const char* pchName);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	uint32_t GetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::HmdColor_t* pColor, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, const char* pchRenderModel, const vr::HmdColor_t* pColor);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError GetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t* ulOverlayHandleParent, vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t ulOverlayHandleParent, const vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_016::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_016::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_016::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_016::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, vr::ETextureType* pAPIType, vr::EColorSpace* pColorSpace, vr::VRTextureBounds_t* pTextureBounds);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_016::EGamepadTextInputMode eInputMode, vr::IVROverlay_016::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::EGamepadTextInputMode eInputMode, vr::IVROverlay_016::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_016::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
	vr::EVROverlayError GetOverlayFlags(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pFlags);
	vr::IVROverlay_016::VRMessageOverlayResponse ShowMessageOverlay(const char* pchText, const char* pchCaption, const char* pchButton0Text, const char* pchButton1Text, const char* pchButton2Text, const char* pchButton3Text);
	void CloseMessageOverlay();
};
#include "BaseOverlay.h"
class CVROverlay_017 : public vr::IVROverlay_017::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_017();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, const char* pchName);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	uint32_t GetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::HmdColor_t* pColor, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, const char* pchRenderModel, const vr::HmdColor_t* pColor);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError GetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t* ulOverlayHandleParent, vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t ulOverlayHandleParent, const vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_017::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_017::VROverlayIntersectionResults_t* pResults);
	bool HandleControllerOverlayInteractionAsMouse(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unControllerDeviceIndex);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_017::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_017::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, const vr::HmdVector2_t& vCenter, float fRadius);
	vr::EVROverlayError GetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, vr::HmdVector2_t* pvCenter, float* pfRadius);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, vr::ETextureType* pAPIType, vr::EColorSpace* pColorSpace, vr::VRTextureBounds_t* pTextureBounds);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_017::EGamepadTextInputMode eInputMode, vr::IVROverlay_017::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::EGamepadTextInputMode eInputMode, vr::IVROverlay_017::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_017::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
	vr::EVROverlayError GetOverlayFlags(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pFlags);
	vr::IVROverlay_017::VRMessageOverlayResponse ShowMessageOverlay(const char* pchText, const char* pchCaption, const char* pchButton0Text, const char* pchButton1Text, const char* pchButton2Text, const char* pchButton3Text);
	void CloseMessageOverlay();
};
#include "BaseOverlay.h"
class CVROverlay_018 : public vr::IVROverlay_018::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_018();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, const char* pchName);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	uint32_t GetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::HmdColor_t* pColor, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, const char* pchRenderModel, const vr::HmdColor_t* pColor);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError GetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t* ulOverlayHandleParent, vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t ulOverlayHandleParent, const vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_018::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_018::VROverlayIntersectionResults_t* pResults);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_018::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_018::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, const vr::HmdVector2_t& vCenter, float fRadius);
	vr::EVROverlayError GetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, vr::HmdVector2_t* pvCenter, float* pfRadius);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, vr::ETextureType* pAPIType, vr::EColorSpace* pColorSpace, vr::VRTextureBounds_t* pTextureBounds);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_018::EGamepadTextInputMode eInputMode, vr::IVROverlay_018::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::EGamepadTextInputMode eInputMode, vr::IVROverlay_018::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_018::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
	vr::EVROverlayError GetOverlayFlags(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pFlags);
	vr::IVROverlay_018::VRMessageOverlayResponse ShowMessageOverlay(const char* pchText, const char* pchCaption, const char* pchButton0Text, const char* pchButton1Text, const char* pchButton2Text, const char* pchButton3Text);
	void CloseMessageOverlay();
};
#include "BaseOverlay.h"
class CVROverlay_019 : public vr::IVROverlay_019::IVROverlay, public CVRCommon {
private:
	const std::shared_ptr<BaseOverlay> base;
public:
	virtual void** _GetStatFuncList() override;
	CVROverlay_019();
	// Interface methods:
	vr::EVROverlayError FindOverlay(const char* pchOverlayKey, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError CreateOverlay(const char* pchOverlayKey, const char* pchOverlayName, vr::VROverlayHandle_t* pOverlayHandle);
	vr::EVROverlayError DestroyOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetHighQualityOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetHighQualityOverlay();
	uint32_t GetOverlayKey(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	uint32_t GetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayName(vr::VROverlayHandle_t ulOverlayHandle, const char* pchName);
	vr::EVROverlayError GetOverlayImageData(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unBufferSize, uint32_t* punWidth, uint32_t* punHeight);
	const char* GetOverlayErrorNameFromEnum(vr::EVROverlayError error);
	vr::EVROverlayError SetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unPID);
	uint32_t GetOverlayRenderingPid(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayFlags eOverlayFlag, bool bEnabled);
	vr::EVROverlayError GetOverlayFlag(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayFlags eOverlayFlag, bool* pbEnabled);
	vr::EVROverlayError SetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float fRed, float fGreen, float fBlue);
	vr::EVROverlayError GetOverlayColor(vr::VROverlayHandle_t ulOverlayHandle, float* pfRed, float* pfGreen, float* pfBlue);
	vr::EVROverlayError SetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float fAlpha);
	vr::EVROverlayError GetOverlayAlpha(vr::VROverlayHandle_t ulOverlayHandle, float* pfAlpha);
	vr::EVROverlayError SetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float fTexelAspect);
	vr::EVROverlayError GetOverlayTexelAspect(vr::VROverlayHandle_t ulOverlayHandle, float* pfTexelAspect);
	vr::EVROverlayError SetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unSortOrder);
	vr::EVROverlayError GetOverlaySortOrder(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punSortOrder);
	vr::EVROverlayError SetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fWidthInMeters);
	vr::EVROverlayError GetOverlayWidthInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfWidthInMeters);
	vr::EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);
	vr::EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(vr::VROverlayHandle_t ulOverlayHandle, float* pfMinDistanceInMeters, float* pfMaxDistanceInMeters);
	vr::EVROverlayError SetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace eTextureColorSpace);
	vr::EVROverlayError GetOverlayTextureColorSpace(vr::VROverlayHandle_t ulOverlayHandle, vr::EColorSpace* peTextureColorSpace);
	vr::EVROverlayError SetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, const vr::VRTextureBounds_t* pOverlayTextureBounds);
	vr::EVROverlayError GetOverlayTextureBounds(vr::VROverlayHandle_t ulOverlayHandle, vr::VRTextureBounds_t* pOverlayTextureBounds);
	uint32_t GetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, char* pchValue, uint32_t unBufferSize, vr::HmdColor_t* pColor, vr::EVROverlayError* pError);
	vr::EVROverlayError SetOverlayRenderModel(vr::VROverlayHandle_t ulOverlayHandle, const char* pchRenderModel, const vr::HmdColor_t* pColor);
	vr::EVROverlayError GetOverlayTransformType(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayTransformType* peTransformType);
	vr::EVROverlayError SetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformAbsolute(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin* peTrackingOrigin, vr::HmdMatrix34_t* pmatTrackingOriginToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unTrackedDevice, const vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punTrackedDevice, vr::HmdMatrix34_t* pmatTrackedDeviceToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t unDeviceIndex, const char* pchComponentName);
	vr::EVROverlayError GetOverlayTransformTrackedDeviceComponent(vr::VROverlayHandle_t ulOverlayHandle, vr::TrackedDeviceIndex_t* punDeviceIndex, char* pchComponentName, uint32_t unComponentNameSize);
	vr::EVROverlayError GetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t* ulOverlayHandleParent, vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError SetOverlayTransformOverlayRelative(vr::VROverlayHandle_t ulOverlayHandle, vr::VROverlayHandle_t ulOverlayHandleParent, const vr::HmdMatrix34_t* pmatParentOverlayToOverlayTransform);
	vr::EVROverlayError ShowOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError HideOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	bool IsOverlayVisible(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError GetTransformForOverlayCoordinates(vr::VROverlayHandle_t ulOverlayHandle, vr::ETrackingUniverseOrigin eTrackingOrigin, vr::HmdVector2_t coordinatesInOverlay, vr::HmdMatrix34_t* pmatTransform);
	bool PollNextOverlayEvent(vr::VROverlayHandle_t ulOverlayHandle, vr::VREvent_t* pEvent, uint32_t uncbVREvent);
	vr::EVROverlayError GetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayInputMethod* peInputMethod);
	vr::EVROverlayError SetOverlayInputMethod(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayInputMethod eInputMethod);
	vr::EVROverlayError GetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdVector2_t* pvecMouseScale);
	vr::EVROverlayError SetOverlayMouseScale(vr::VROverlayHandle_t ulOverlayHandle, const vr::HmdVector2_t* pvecMouseScale);
	bool ComputeOverlayIntersection(vr::VROverlayHandle_t ulOverlayHandle, const vr::IVROverlay_019::VROverlayIntersectionParams_t* pParams, vr::IVROverlay_019::VROverlayIntersectionResults_t* pResults);
	bool IsHoverTargetOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::VROverlayHandle_t GetGamepadFocusOverlay();
	vr::EVROverlayError SetGamepadFocusOverlay(vr::VROverlayHandle_t ulNewFocusOverlay);
	vr::EVROverlayError SetOverlayNeighbor(vr::IVROverlay_019::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom, vr::VROverlayHandle_t ulTo);
	vr::EVROverlayError MoveGamepadFocusToNeighbor(vr::IVROverlay_019::EOverlayDirection eDirection, vr::VROverlayHandle_t ulFrom);
	vr::EVROverlayError SetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, const vr::HmdVector2_t* pvCenter, float fRadius);
	vr::EVROverlayError GetOverlayDualAnalogTransform(vr::VROverlayHandle_t ulOverlay, vr::EDualAnalogWhich eWhich, vr::HmdVector2_t* pvCenter, float* pfRadius);
	vr::EVROverlayError SetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, const vr::Texture_t* pTexture);
	vr::EVROverlayError ClearOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetOverlayRaw(vr::VROverlayHandle_t ulOverlayHandle, void* pvBuffer, uint32_t unWidth, uint32_t unHeight, uint32_t unDepth);
	vr::EVROverlayError SetOverlayFromFile(vr::VROverlayHandle_t ulOverlayHandle, const char* pchFilePath);
	vr::EVROverlayError GetOverlayTexture(vr::VROverlayHandle_t ulOverlayHandle, void** pNativeTextureHandle, void* pNativeTextureRef, uint32_t* pWidth, uint32_t* pHeight, uint32_t* pNativeFormat, vr::ETextureType* pAPIType, vr::EColorSpace* pColorSpace, vr::VRTextureBounds_t* pTextureBounds);
	vr::EVROverlayError ReleaseNativeOverlayHandle(vr::VROverlayHandle_t ulOverlayHandle, void* pNativeTextureHandle);
	vr::EVROverlayError GetOverlayTextureSize(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pWidth, uint32_t* pHeight);
	vr::EVROverlayError CreateDashboardOverlay(const char* pchOverlayKey, const char* pchOverlayFriendlyName, vr::VROverlayHandle_t* pMainHandle, vr::VROverlayHandle_t* pThumbnailHandle);
	bool IsDashboardVisible();
	bool IsActiveDashboardOverlay(vr::VROverlayHandle_t ulOverlayHandle);
	vr::EVROverlayError SetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t unProcessId);
	vr::EVROverlayError GetDashboardOverlaySceneProcess(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* punProcessId);
	void ShowDashboard(const char* pchOverlayToShow);
	vr::TrackedDeviceIndex_t GetPrimaryDashboardDevice();
	vr::EVROverlayError ShowKeyboard(vr::IVROverlay_019::EGamepadTextInputMode eInputMode, vr::IVROverlay_019::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	vr::EVROverlayError ShowKeyboardForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::EGamepadTextInputMode eInputMode, vr::IVROverlay_019::EGamepadTextInputLineMode eLineInputMode, const char* pchDescription, uint32_t unCharMax, const char* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue);
	uint32_t GetKeyboardText(char* pchText, uint32_t cchText);
	void HideKeyboard();
	void SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin eTrackingOrigin, const vr::HmdMatrix34_t* pmatTrackingOriginToKeyboardTransform);
	void SetKeyboardPositionForOverlay(vr::VROverlayHandle_t ulOverlayHandle, vr::HmdRect2_t avoidRect);
	vr::EVROverlayError SetOverlayIntersectionMask(vr::VROverlayHandle_t ulOverlayHandle, vr::IVROverlay_019::VROverlayIntersectionMaskPrimitive_t* pMaskPrimitives, uint32_t unNumMaskPrimitives, uint32_t unPrimitiveSize);
	vr::EVROverlayError GetOverlayFlags(vr::VROverlayHandle_t ulOverlayHandle, uint32_t* pFlags);
	vr::IVROverlay_019::VRMessageOverlayResponse ShowMessageOverlay(const char* pchText, const char* pchCaption, const char* pchButton0Text, const char* pchButton1Text, const char* pchButton2Text, const char* pchButton3Text);
	void CloseMessageOverlay();
};
