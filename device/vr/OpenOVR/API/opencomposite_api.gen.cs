// Generated by OpenComposite's Reimpl/generate.py, do not hand modify as it will be overwritten!
using System;
using System.Runtime.InteropServices;
using Valve.VR;
namespace OCAPI
{

[StructLayout(LayoutKind.Sequential)]
public struct IVROCSystem
{
	public const string Version = "IVROCSystem_001";

	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	internal delegate ulong _GetExtendedButtonStatus();
	[MarshalAs(UnmanagedType.FunctionPtr)]
	internal _GetExtendedButtonStatus GetExtendedButtonStatus;

}
public class CVROCSystem
{
	private IVROCSystem fn;
	internal CVROCSystem(IntPtr ptr) {
		fn = (IVROCSystem)Marshal.PtrToStructure(ptr, typeof(IVROCSystem));
	}
	public ulong GetExtendedButtonStatus() {
		return fn.GetExtendedButtonStatus();
	}
}

public static class OpenComposite
{
	public static CVROCSystem System { get {
		CheckClear();
		if(m_System_done) return m_System;
		if(OpenVR.IsInterfaceVersionValid(IVROCSystem.Version)) {
			var eError = EVRInitError.None;
			IntPtr ptr = OpenVR.GetGenericInterface(FnTable_Prefix+IVROCSystem.Version, ref eError);
			if(ptr != IntPtr.Zero && eError == EVRInitError.None)
				m_System = new CVROCSystem(ptr);
		}
		m_System_done = true;
		return m_System;
	}}

	const string FnTable_Prefix = "FnTable:";
	private static uint VRToken { get; set; }
	private static void CheckClear() {
		if(VRToken == OpenVR.GetInitToken())
			return;
		VRToken = OpenVR.GetInitToken();
		m_System = null;
		m_System_done = false;
	}

	private static CVROCSystem m_System;
	private static bool m_System_done;
}

}
